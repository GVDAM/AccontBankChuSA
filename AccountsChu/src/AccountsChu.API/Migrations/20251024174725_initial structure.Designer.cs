// <auto-generated />
using System;
using AccountsChu.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountsChu.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251024174725_initial structure")]
    partial class initialstructure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountsChu.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Agency")
                        .HasColumnType("smallint")
                        .HasColumnName("agency");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,8)")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Agency", "Number")
                        .IsUnique()
                        .HasDatabaseName("idx_agency_number_account");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_email_customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(10,8)")
                        .HasColumnName("ammout");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ReceiverAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_account_id");

                    b.Property<int>("SenderAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_account_id");

                    b.HasKey("Id")
                        .HasName("pk_transaction");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("idx_transaction_account_id");

                    b.HasIndex("ReceiverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Account", b =>
                {
                    b.HasOne("AccountsChu.Domain.Entities.Customer", "Customer")
                        .WithMany("Account")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("AccountsChu.Domain.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account");

                    b.HasOne("AccountsChu.Domain.Entities.Customer", "ReceiverAccount")
                        .WithMany("TransactionsReceiver")
                        .HasForeignKey("ReceiverAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_receiver_account");

                    b.HasOne("AccountsChu.Domain.Entities.Customer", "SenderAccount")
                        .WithMany("TransactionsSender")
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sender_account");

                    b.Navigation("Account");

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountsChu.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("TransactionsReceiver");

                    b.Navigation("TransactionsSender");
                });
#pragma warning restore 612, 618
        }
    }
}
